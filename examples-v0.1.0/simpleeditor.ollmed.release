
require 'gtk3'
require 'pango'

# LLMED-COMPILED

class TextEditor
  def initialize
    @app = Gtk::Application.new("org.gtk.texteditor", :flags_none)
    @app.signal_connect("activate") { |application| create_window(application) }
  end

  def create_window(application)
    window = Gtk::ApplicationWindow.new(application)
    window.set_title("Text Editor")
    window.set_default_size(400, 400)

    # Menu Bar
    menubar = Gtk::MenuBar.new
    file_menu = create_file_menu
    view_menu = create_view_menu
    about_menu = create_about_menu

    menubar.append(file_menu)
    menubar.append(view_menu)
    menubar.append(about_menu)

    # Text Area
    @text_area = Gtk::TextView.new

    # Layout
    vbox = Gtk::Box.new(:vertical)
    vbox.pack_start(menubar, false, false, 0)
    vbox.pack_start(@text_area, true, true, 0)

    window.add(vbox)
    window.show_all
  end

  def create_file_menu
    file_menu = Gtk::Menu.new
    new_item = Gtk::MenuItem.new("New")
    open_item = Gtk::MenuItem.new("Open")
    save_item = Gtk::MenuItem.new("Save")

    new_item.signal_connect("activate") { @text_area.buffer.text = "" }
    open_item.signal_connect("activate") { open_file }
    save_item.signal_connect("activate") { save_file }

    file_menu.append(new_item)
    file_menu.append(open_item)
    file_menu.append(save_item)

    file_menu_item = Gtk::MenuItem.new("File")
    file_menu_item.set_submenu(file_menu)
    file_menu_item
  end

  def open_file
    dialog = Gtk::FileChooserDialog.new("Open File", nil, Gtk::FileChooser::Action::OPEN)
    dialog.add_button("Cancel", Gtk::ResponseType::CANCEL)
    dialog.add_button("Open", Gtk::ResponseType::ACCEPT)

    if dialog.run == Gtk::ResponseType::ACCEPT
      filename = dialog.filename
      @text_area.buffer.text = File.read(filename)
    end
    dialog.destroy
  end

  def save_file
    dialog = Gtk::FileChooserDialog.new("Save File", nil, Gtk::FileChooser::Action::SAVE)
    dialog.add_button("Cancel", Gtk::ResponseType::CANCEL)
    dialog.add_button("Save", Gtk::ResponseType::ACCEPT)

    if dialog.run == Gtk::ResponseType::ACCEPT
      filename = dialog.filename
      File.write(filename, @text_area.buffer.text)
    end
    dialog.destroy
  end

  def create_view_menu
    view_menu = Gtk::Menu.new
    font_size_menu = Gtk::Menu.new

    [12, 15, 20, 25].each do |size|
      item = Gtk::MenuItem.new("#{size}")
      item.signal_connect("activate") { @text_area.override_font(Pango::FontDescription.new("#{size}")) }
      font_size_menu.append(item)
    end

    font_size_item = Gtk::MenuItem.new("Font Size")
    font_size_item.set_submenu(font_size_menu)

    view_menu.append(font_size_item)
    view_menu_item = Gtk::MenuItem.new("View")
    view_menu_item.set_submenu(view_menu)
    view_menu_item
  end

  def create_about_menu
    about_menu = Gtk::Menu.new
    about_item = Gtk::MenuItem.new("About")
    about_item.signal_connect("activate") {
      dialog = Gtk::MessageDialog.new(nil, :modal, :info, :ok, "Compiled with LLMed\nhttps://github.com/bit4bit/llm-labs")
      dialog.run
      dialog.destroy
    }

    about_menu.append(about_item)
    about_menu_item = Gtk::MenuItem.new("About")
    about_menu_item.set_submenu(about_menu)
    about_menu_item
  end

  def run
    @app.run
  end
end

editor = TextEditor.new
editor.run
