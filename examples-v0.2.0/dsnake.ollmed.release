
#<llmed-code context='dependencies' digest='cb339ef8e40798727086703f60408470fe53fd4606b26baea111ce30aa2d3582'>
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk
import random
#</llmed-code>

#<llmed-code context='logic' digest='7b2f33bbbf0f8ff992289100351c92cc72459ba2b2b9a29805046c4fd458021b'>
class World:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.snake = [(width // 2, height // 2)]
        self.direction = (0, 1)
        self.fruits = [self._place_fruit()]

    def _place_fruit(self):
        while True:
            position = (random.randint(0, self.width - 1), random.randint(0, self.height - 1))
            if position not in self.snake:
                return position

    def update(self):
        # Move the snake
        new_head = (self.snake[0][0] + self.direction[0], self.snake[0][1] + self.direction[1])
        self.snake.insert(0, new_head)

        # Check if the snake eats fruit
        if new_head in self.fruits:
            self.fruits.remove(new_head)
            self.fruits.append(self._place_fruit())
        else:
            self.snake.pop()

        # Check for collisions
        if (new_head[0] < 0 or new_head[0] >= self.width or
                new_head[1] < 0 or new_head[1] >= self.height or
                new_head in self.snake[1:]):
            raise Exception("Game Over")

    def change_direction(self, new_direction):
        opposite_direction = (-self.direction[0], -self.direction[1])
        if new_direction != opposite_direction:
            self.direction = new_direction
#</llmed-code>

#<llmed-code context='UI' digest='9554c3a37aa96b735c08a47b76b27d9441f641b5d100ee1ca3f336866d2e5b11'>
class SnakeGameUI(Gtk.Window):
    def __init__(self):
        super().__init__(title="Snake Game")
        self.set_default_size(400, 400)
        self.connect("key-press-event", self.on_key_press)

        self.grid = Gtk.Grid()
        self.add(self.grid)

        self.world = World(20, 20)

        self.area = Gtk.DrawingArea()
        self.area.set_size_request(400, 400)
        self.area.connect("draw", self.on_draw)
        self.grid.attach(self.area, 0, 0, 1, 1)

        self.timeout_id = Gtk.timeout_add(100, self.on_timeout)

    def on_draw(self, widget, cr):
        cr.set_source_rgb(0, 0, 0)
        cr.paint()

        # Draw the snake
        cr.set_source_rgb(0, 1, 0)
        for x, y in self.world.snake:
            cr.rectangle(x * 20, y * 20, 20, 20)
            cr.fill()

        # Draw the fruits
        cr.set_source_rgb(1, 0, 0)
        for x, y in self.world.fruits:
            cr.rectangle(x * 20, y * 20, 20, 20)
            cr.fill()

    def on_key_press(self, widget, event):
        if event.keyval == Gdk.KEY_Up:
            self.world.change_direction((0, -1))
        elif event.keyval == Gdk.KEY_Down:
            self.world.change_direction((0, 1))
        elif event.keyval == Gdk.KEY_Left:
            self.world.change_direction((-1, 0))
        elif event.keyval == Gdk.KEY_Right:
            self.world.change_direction((1, 0))

    def on_timeout(self):
        try:
            self.world.update()
            self.area.queue_draw()
            return True
        except Exception as e:
            print(e)
            return False

if __name__ == "__main__":
    win = SnakeGameUI()
    win.connect("destroy", Gtk.main_quit)
    win.show_all()
    Gtk.main()
#</llmed-code>
